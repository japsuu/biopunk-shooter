using System;
using UnityEngine;
using UnityEngine.Serialization;

namespace Items
{
    /// <summary>
    /// All weapons have some base stats, and can contain a certain amount of ProjectileEvents.
    /// </summary>
    public class Weapon : ItemData
    {
        public override ItemType Type { get; }
    }
    
    /// <summary>
    /// The lifetime of a projectile consists of multiple "events", each of which can modify the projectile in some way.
    /// Projectiles internally keep an array of these events, and apply them in order to themselves.
    /// Projectile is destroyed, when all the events have been applied.
    ///
    /// Initially the player's weapon will consist of "set velocity" and "delay" events, to make the projectile move and destroy it after a certain time.
    /// </summary>
    [Serializable]
    public class ProjectileEvent
    {
        
    }
    
    [CreateAssetMenu(menuName = "Items/Create New Weapon Part", fileName = "WeaponPart_", order = 0)]
    public class WeaponPartData : ItemData
    {
        [Header("Weapon Effects")]
        
        [Tooltip("Changes the amount of heat generated by the weapon when it is fired, by this factor.")]
        [FormerlySerializedAs("_generatedHeatPerShot")]
        [SerializeField]
        private float _generatedHeatPerShotFactor;

        [Tooltip("Changes the time it takes for the weapon to cool down, after it has overheated, by this factor.")]
        [FormerlySerializedAs("_cooldownTimeSeconds")]
        [SerializeField]
        private float _cooldownTimeSecondsFactor;

        [Tooltip("Changes the fire rate of the weapon, by this factor.")]
        [FormerlySerializedAs("_fireRateRpm")]
        [SerializeField]
        private float _fireRateRpmFactor;

        
        [Header("Projectile Effects")]

        [Tooltip("Changes the speed of the projectile by this factor.")]
        [SerializeField]
        private float _projectileSpeed;

        [Tooltip("Changes the size of the projectile by this factor.")]
        [SerializeField]
        private float _projectileSize;

        [Tooltip("Changes the damage of the projectile by this factor.")]
        [SerializeField]
        private float _damage;

        
        [Header("Special Projectile Effects")]
        
        [Tooltip("Changes to how many projectiles the original projectile splits into.")]
        [SerializeField]
        [Range(1, 16)]
        private int _splitCount = 1;
        
        /// <summary>
        /// C
        /// </summary>
        [SerializeField]
        private bool _explodes;

        public override ItemType Type => ItemType.ProjectileEvent;
        
        public float GeneratedHeatPerShotFactor => _generatedHeatPerShotFactor;
        public float CooldownTimeSecondsFactor => _cooldownTimeSecondsFactor;
        public float FireRateRpmFactor => _fireRateRpmFactor;
        public float ProjectileSpeed => _projectileSpeed;
        public float ProjectileSize => _projectileSize;
        public float Damage => _damage;
        public int SplitCount => _splitCount;
        public bool Explodes => _explodes;
    }
}