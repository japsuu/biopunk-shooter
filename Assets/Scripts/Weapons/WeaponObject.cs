using Items;
using NaughtyAttributes;
using UnityEngine;

namespace Weapons
{
    /// <summary>
    /// Manages a single weapon.
    /// If the heat generated by the weapon exceeds a certain threshold, the weapon will overheat and be unusable for a short time.
    /// </summary>
    public class WeaponObject : MonoBehaviour
    {
        private const float HEAT_THRESHOLD = 100f;
        
        [Header("References")]
        
        [SerializeField]
        private Transform _projectileSpawnPoint;
        
        [Header("Config")]
        
        [SerializeField]
        [Tooltip("The rounds per minute of the weapon.")]
        private float _baseFireRateRpm = 60f;
        
        [SerializeField]
        [Tooltip("The amount of heat generated per shot.")]
        private float _baseHeatGeneratedPerShot = 10f;
        
        [SerializeField]
        [Tooltip("The amount of heat removed per second.")]
        private float _baseHeatRemovedPerSecond = 20f;
        
        [SerializeField]
        [Tooltip("The time it takes for the barrel to cool down, after it has overheated.")]
        private float _baseOverheatCooldownSeconds = 2f;
        
        // Calculated from the current weapon parts.
        private float _fireRateRpm;
        private float _generatedHeatPerShot;
        private float _heatRemovedPerSecond;
        private float _overheatCooldownSeconds;
        
        [ReadOnly, SerializeField]
        private float _currentHeat;
        [ReadOnly, SerializeField]
        private float _overheatCooldownLeft;
        [ReadOnly, SerializeField]
        private float _fireDelayLeft;
        
        public DynamicWeaponData DynamicData { get; private set; } = new DynamicWeaponData(null);
        private Projectile _projectilePrefab;
        private IDamageCauser _owner;
        
        
        public void Initialize(Projectile projectilePrefab, IDamageCauser owner)
        {
            _projectilePrefab = projectilePrefab;
            _owner = owner;
            _fireRateRpm = _baseFireRateRpm;
            _generatedHeatPerShot = _baseHeatGeneratedPerShot;
            _heatRemovedPerSecond = _baseHeatRemovedPerSecond;
            _overheatCooldownSeconds = _baseOverheatCooldownSeconds;
        }
        
        
        public void SetParts(WeaponPartData[] parts)
        {
            DynamicData = new DynamicWeaponData(parts);
        }


        private void Update()
        {
            // Handle overheating.
            if (_overheatCooldownLeft > 0f)
            {
                _overheatCooldownLeft -= Time.deltaTime;
                _currentHeat = 0f;
            }
            else
            {
                _currentHeat -= _heatRemovedPerSecond * Time.deltaTime;
                if (_currentHeat < 0f)
                {
                    _currentHeat = 0f;
                }
            }
            
            // Handle firing delay.
            if (_fireDelayLeft > 0f)
            {
                _fireDelayLeft -= Time.deltaTime;
            }
        }
        
        
        public void TryFire()
        {
            if (_fireDelayLeft > 0f)
                return;
            
            if (_overheatCooldownLeft > 0f)
                return;
            
            if (_currentHeat >= HEAT_THRESHOLD)
            {
                _overheatCooldownLeft = _overheatCooldownSeconds;
                return;
            }
            
            _currentHeat += _generatedHeatPerShot;
            Fire();
            _fireDelayLeft = 60f / _fireRateRpm;
        }


        private void Fire()
        {
            Projectile p = Instantiate(_projectilePrefab, _projectileSpawnPoint.position, _projectileSpawnPoint.rotation);
            p.Initialize(DynamicData, _owner);
        }
    }
}